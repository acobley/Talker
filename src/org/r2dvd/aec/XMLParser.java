package org.r2dvd.aec;
import java.io.*;
import java.util.HashMap;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

import org.scribe.builder.*;
import org.scribe.builder.api.*;
import org.scribe.model.*;
import org.scribe.oauth.*;

public class XMLParser extends DefaultHandler{
	 private HashMap ElementsMap = new HashMap();
	  private int CurrentState=-1;
	  AuthorStore au;
	  
	public XMLParser(){
		 ElementsMap.put("name", 0);
		 ElementsMap.put("screen_name", 1);
		 ElementsMap.put("id", 2);
		 au = new AuthorStore();

	}
	
	public AuthorStore GetStore(){
		return au;
	}
	
	public AuthorStore GetDetails(Response body){
		
		
		//DefaultHandler handler = new XMLParser();
		XMLParser handler=new XMLParser();
       // Use the default (non-validating) parser
       SAXParserFactory factory = SAXParserFactory.newInstance();
       AuthorStore aul=null;
       try {
           
       	synchronized (this){
           // Parse the input
           SAXParser saxParser = factory.newSAXParser();
           saxParser.parse(body.getStream(), handler);
           
           aul=handler.GetStore();
       	}

       } catch (SAXParseException spe) {
          // Error generated by the parser
          System.out.println("\n** Parsing error"
             + ", line " + spe.getLineNumber()
             + ", uri " + spe.getSystemId());
          System.out.println("   " + spe.getMessage() );

          // Use the contained exception, if any
          Exception  x = spe;
          if (spe.getException() != null)
              x = spe.getException();
          x.printStackTrace();

       } catch (SAXException sxe) {
          // Error generated by this application
          // (or a parser-initialization error)
          Exception  x = sxe;
          if (sxe.getException() != null)
              x = sxe.getException();
          x.printStackTrace();

       } catch (ParserConfigurationException pce) {
           // Parser with specified options can't be built
           pce.printStackTrace();

       } catch (IOException ioe) {
          // I/O error
          ioe.printStackTrace();
       }
		
		
		
		
		return aul;
		
	}
	
	
	 public void startElement(String namespaceURI,
            String lName, // local name
            String qName, // qualified name
            Attributes attrs)
throws SAXException
{
//indentLevel++;
		 //System.out.print("ELEMENT: ");
		 String eName = lName; // element name
		 if ("".equals(eName)) 
			 eName = qName; // namespaceAware = false
		
		 if (ElementsMap.containsKey(eName)){
			 System.out.println(eName);
			 Integer ICurrentState =(Integer) ElementsMap.get(eName);
			 try{
				 CurrentState=ICurrentState.intValue();
			 }catch(Exception et){
				 System.out.println("Can't convert CurrentState to int");
			 }
		 }else{
			 CurrentState=-1;
		 }

}

	 public void characters(char buf[], int offset, int len)
	    throws SAXException
	    {
	        //System.out.println("CHARS:   ");
	        String s = new String(buf, offset, len);
	        
	        if (au ==null)
	        	System.out.println("Hmm, why is au null ?");
	        switch(CurrentState){
	        	case 0: if (!s.trim().equals(""))
		        			System.out.println(s);
	        			au.setname(s);
	        			System.out.println("Set "+au.getname());
	        			CurrentState=-1; //We've processed that now
	        			break;
	        	case 1:	if (!s.trim().equals(""))
		        			System.out.println(s);
	        			au.setemailName(s); // This is Screen_name, equiv of email on twitter
	        			au.settwitterName(s);
	        			System.out.println("Set"+au.getemailName());
	        			CurrentState=-1; //We've processed that now
	        			break;
	        	case 2:	if (!s.trim().equals(""))
	        		try {
	        			long UserId=Long.parseLong(s);
	        			System.out.println("user id "+UserId);
	        			au.setUserId(UserId);
	        		}catch(Exception et){
	        			System.out.println("USer id not a log)");
	        		}
        			System.out.println("id " +s);
        			System.out.println("Set"+au.getUserId());
    			CurrentState=-1; //We've processed that now
    			break;		
	        	default:break;
	        }
	    }	 
}
